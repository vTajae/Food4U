# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI import util


class FoodListCriteria(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_type: List[str]=None, page_size: int=None, page_number: int=None, sort_by: str=None, sort_order: str=None):  # noqa: E501
        """FoodListCriteria - a model defined in Swagger

        :param data_type: The data_type of this FoodListCriteria.  # noqa: E501
        :type data_type: List[str]
        :param page_size: The page_size of this FoodListCriteria.  # noqa: E501
        :type page_size: int
        :param page_number: The page_number of this FoodListCriteria.  # noqa: E501
        :type page_number: int
        :param sort_by: The sort_by of this FoodListCriteria.  # noqa: E501
        :type sort_by: str
        :param sort_order: The sort_order of this FoodListCriteria.  # noqa: E501
        :type sort_order: str
        """
        self.swagger_types = {
            'data_type': List[str],
            'page_size': int,
            'page_number': int,
            'sort_by': str,
            'sort_order': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'page_size': 'pageSize',
            'page_number': 'pageNumber',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder'
        }
        self._data_type = data_type
        self._page_size = page_size
        self._page_number = page_number
        self._sort_by = sort_by
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt) -> 'FoodListCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoodListCriteria of this FoodListCriteria.  # noqa: E501
        :rtype: FoodListCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self) -> List[str]:
        """Gets the data_type of this FoodListCriteria.

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :return: The data_type of this FoodListCriteria.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: List[str]):
        """Sets the data_type of this FoodListCriteria.

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :param data_type: The data_type of this FoodListCriteria.
        :type data_type: List[str]
        """
        allowed_values = ["Branded", "Foundation", "Survey (FNDDS)", "SR Legacy"]  # noqa: E501
        if not set(data_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(data_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._data_type = data_type

    @property
    def page_size(self) -> int:
        """Gets the page_size of this FoodListCriteria.

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :return: The page_size of this FoodListCriteria.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this FoodListCriteria.

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :param page_size: The page_size of this FoodListCriteria.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_number(self) -> int:
        """Gets the page_number of this FoodListCriteria.

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :return: The page_number of this FoodListCriteria.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number: int):
        """Sets the page_number of this FoodListCriteria.

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :param page_number: The page_number of this FoodListCriteria.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def sort_by(self) -> str:
        """Gets the sort_by of this FoodListCriteria.

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.  # noqa: E501

        :return: The sort_by of this FoodListCriteria.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by: str):
        """Sets the sort_by of this FoodListCriteria.

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.  # noqa: E501

        :param sort_by: The sort_by of this FoodListCriteria.
        :type sort_by: str
        """
        allowed_values = ["dataType.keyword", "lowercaseDescription.keyword", "fdcId", "publishedDate"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def sort_order(self) -> str:
        """Gets the sort_order of this FoodListCriteria.

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :return: The sort_order of this FoodListCriteria.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: str):
        """Sets the sort_order of this FoodListCriteria.

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :param sort_order: The sort_order of this FoodListCriteria.
        :type sort_order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
