# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI import util


class FoodSearchCriteria(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, query: str=None, data_type: List[str]=None, page_size: int=None, page_number: int=None, sort_by: str=None, sort_order: str=None, brand_owner: str=None, trade_channel: List[str]=None, start_date: str=None, end_date: str=None):  # noqa: E501
        """FoodSearchCriteria - a model defined in Swagger

        :param query: The query of this FoodSearchCriteria.  # noqa: E501
        :type query: str
        :param data_type: The data_type of this FoodSearchCriteria.  # noqa: E501
        :type data_type: List[str]
        :param page_size: The page_size of this FoodSearchCriteria.  # noqa: E501
        :type page_size: int
        :param page_number: The page_number of this FoodSearchCriteria.  # noqa: E501
        :type page_number: int
        :param sort_by: The sort_by of this FoodSearchCriteria.  # noqa: E501
        :type sort_by: str
        :param sort_order: The sort_order of this FoodSearchCriteria.  # noqa: E501
        :type sort_order: str
        :param brand_owner: The brand_owner of this FoodSearchCriteria.  # noqa: E501
        :type brand_owner: str
        :param trade_channel: The trade_channel of this FoodSearchCriteria.  # noqa: E501
        :type trade_channel: List[str]
        :param start_date: The start_date of this FoodSearchCriteria.  # noqa: E501
        :type start_date: str
        :param end_date: The end_date of this FoodSearchCriteria.  # noqa: E501
        :type end_date: str
        """
        self.swagger_types = {
            'query': str,
            'data_type': List[str],
            'page_size': int,
            'page_number': int,
            'sort_by': str,
            'sort_order': str,
            'brand_owner': str,
            'trade_channel': List[str],
            'start_date': str,
            'end_date': str
        }

        self.attribute_map = {
            'query': 'query',
            'data_type': 'dataType',
            'page_size': 'pageSize',
            'page_number': 'pageNumber',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder',
            'brand_owner': 'brandOwner',
            'trade_channel': 'tradeChannel',
            'start_date': 'startDate',
            'end_date': 'endDate'
        }
        self._query = query
        self._data_type = data_type
        self._page_size = page_size
        self._page_number = page_number
        self._sort_by = sort_by
        self._sort_order = sort_order
        self._brand_owner = brand_owner
        self._trade_channel = trade_channel
        self._start_date = start_date
        self._end_date = end_date

    @classmethod
    def from_dict(cls, dikt) -> 'FoodSearchCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoodSearchCriteria of this FoodSearchCriteria.  # noqa: E501
        :rtype: FoodSearchCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self) -> str:
        """Gets the query of this FoodSearchCriteria.

        Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)  # noqa: E501

        :return: The query of this FoodSearchCriteria.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this FoodSearchCriteria.

        Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)  # noqa: E501

        :param query: The query of this FoodSearchCriteria.
        :type query: str
        """

        self._query = query

    @property
    def data_type(self) -> List[str]:
        """Gets the data_type of this FoodSearchCriteria.

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :return: The data_type of this FoodSearchCriteria.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: List[str]):
        """Sets the data_type of this FoodSearchCriteria.

        Optional. Filter on a specific data type; specify one or more values in an array.  # noqa: E501

        :param data_type: The data_type of this FoodSearchCriteria.
        :type data_type: List[str]
        """
        allowed_values = ["Branded", "Foundation", "Survey (FNDDS)", "SR Legacy"]  # noqa: E501
        if not set(data_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(data_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._data_type = data_type

    @property
    def page_size(self) -> int:
        """Gets the page_size of this FoodSearchCriteria.

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :return: The page_size of this FoodSearchCriteria.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this FoodSearchCriteria.

        Optional. Maximum number of results to return for the current page. Default is 50.  # noqa: E501

        :param page_size: The page_size of this FoodSearchCriteria.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_number(self) -> int:
        """Gets the page_number of this FoodSearchCriteria.

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :return: The page_number of this FoodSearchCriteria.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number: int):
        """Sets the page_number of this FoodSearchCriteria.

        Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)  # noqa: E501

        :param page_number: The page_number of this FoodSearchCriteria.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def sort_by(self) -> str:
        """Gets the sort_by of this FoodSearchCriteria.

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.  # noqa: E501

        :return: The sort_by of this FoodSearchCriteria.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by: str):
        """Sets the sort_by of this FoodSearchCriteria.

        Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.  # noqa: E501

        :param sort_by: The sort_by of this FoodSearchCriteria.
        :type sort_by: str
        """
        allowed_values = ["dataType.keyword", "lowercaseDescription.keyword", "fdcId", "publishedDate"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def sort_order(self) -> str:
        """Gets the sort_order of this FoodSearchCriteria.

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :return: The sort_order of this FoodSearchCriteria.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: str):
        """Sets the sort_order of this FoodSearchCriteria.

        Optional. The sort direction for the results. Only applicable if sortBy is specified.  # noqa: E501

        :param sort_order: The sort_order of this FoodSearchCriteria.
        :type sort_order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def brand_owner(self) -> str:
        """Gets the brand_owner of this FoodSearchCriteria.

        Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.  # noqa: E501

        :return: The brand_owner of this FoodSearchCriteria.
        :rtype: str
        """
        return self._brand_owner

    @brand_owner.setter
    def brand_owner(self, brand_owner: str):
        """Sets the brand_owner of this FoodSearchCriteria.

        Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.  # noqa: E501

        :param brand_owner: The brand_owner of this FoodSearchCriteria.
        :type brand_owner: str
        """

        self._brand_owner = brand_owner

    @property
    def trade_channel(self) -> List[str]:
        """Gets the trade_channel of this FoodSearchCriteria.

        Optional. Filter foods containing any of the specified trade channels.  # noqa: E501

        :return: The trade_channel of this FoodSearchCriteria.
        :rtype: List[str]
        """
        return self._trade_channel

    @trade_channel.setter
    def trade_channel(self, trade_channel: List[str]):
        """Sets the trade_channel of this FoodSearchCriteria.

        Optional. Filter foods containing any of the specified trade channels.  # noqa: E501

        :param trade_channel: The trade_channel of this FoodSearchCriteria.
        :type trade_channel: List[str]
        """
        allowed_values = ["CHILD_NUTRITION_FOOD_PROGRAMS", "DRUG", "FOOD_SERVICE", "GROCERY", "MASS_MERCHANDISING", "MILITARY", "ONLINE", "VENDING"]  # noqa: E501
        if not set(trade_channel).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `trade_channel` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(trade_channel) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._trade_channel = trade_channel

    @property
    def start_date(self) -> str:
        """Gets the start_date of this FoodSearchCriteria.

        Filter foods published on or after this date. Format: YYYY-MM-DD  # noqa: E501

        :return: The start_date of this FoodSearchCriteria.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this FoodSearchCriteria.

        Filter foods published on or after this date. Format: YYYY-MM-DD  # noqa: E501

        :param start_date: The start_date of this FoodSearchCriteria.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def end_date(self) -> str:
        """Gets the end_date of this FoodSearchCriteria.

        Filter foods published on or before this date. Format: YYYY-MM-DD  # noqa: E501

        :return: The end_date of this FoodSearchCriteria.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this FoodSearchCriteria.

        Filter foods published on or before this date. Format: YYYY-MM-DD  # noqa: E501

        :param end_date: The end_date of this FoodSearchCriteria.
        :type end_date: str
        """

        self._end_date = end_date
