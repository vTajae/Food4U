# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI.models.measure_unit import MeasureUnit  # noqa: F401,E501
from FoodCentralAPI import util


class FoodPortion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, amount: float=None, data_points: int=None, gram_weight: float=None, min_year_acquired: int=None, modifier: str=None, portion_description: str=None, sequence_number: int=None, measure_unit: MeasureUnit=None):  # noqa: E501
        """FoodPortion - a model defined in Swagger

        :param id: The id of this FoodPortion.  # noqa: E501
        :type id: int
        :param amount: The amount of this FoodPortion.  # noqa: E501
        :type amount: float
        :param data_points: The data_points of this FoodPortion.  # noqa: E501
        :type data_points: int
        :param gram_weight: The gram_weight of this FoodPortion.  # noqa: E501
        :type gram_weight: float
        :param min_year_acquired: The min_year_acquired of this FoodPortion.  # noqa: E501
        :type min_year_acquired: int
        :param modifier: The modifier of this FoodPortion.  # noqa: E501
        :type modifier: str
        :param portion_description: The portion_description of this FoodPortion.  # noqa: E501
        :type portion_description: str
        :param sequence_number: The sequence_number of this FoodPortion.  # noqa: E501
        :type sequence_number: int
        :param measure_unit: The measure_unit of this FoodPortion.  # noqa: E501
        :type measure_unit: MeasureUnit
        """
        self.swagger_types = {
            'id': int,
            'amount': float,
            'data_points': int,
            'gram_weight': float,
            'min_year_acquired': int,
            'modifier': str,
            'portion_description': str,
            'sequence_number': int,
            'measure_unit': MeasureUnit
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'data_points': 'dataPoints',
            'gram_weight': 'gramWeight',
            'min_year_acquired': 'minYearAcquired',
            'modifier': 'modifier',
            'portion_description': 'portionDescription',
            'sequence_number': 'sequenceNumber',
            'measure_unit': 'measureUnit'
        }
        self._id = id
        self._amount = amount
        self._data_points = data_points
        self._gram_weight = gram_weight
        self._min_year_acquired = min_year_acquired
        self._modifier = modifier
        self._portion_description = portion_description
        self._sequence_number = sequence_number
        self._measure_unit = measure_unit

    @classmethod
    def from_dict(cls, dikt) -> 'FoodPortion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoodPortion of this FoodPortion.  # noqa: E501
        :rtype: FoodPortion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this FoodPortion.


        :return: The id of this FoodPortion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this FoodPortion.


        :param id: The id of this FoodPortion.
        :type id: int
        """

        self._id = id

    @property
    def amount(self) -> float:
        """Gets the amount of this FoodPortion.


        :return: The amount of this FoodPortion.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this FoodPortion.


        :param amount: The amount of this FoodPortion.
        :type amount: float
        """

        self._amount = amount

    @property
    def data_points(self) -> int:
        """Gets the data_points of this FoodPortion.


        :return: The data_points of this FoodPortion.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points: int):
        """Sets the data_points of this FoodPortion.


        :param data_points: The data_points of this FoodPortion.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def gram_weight(self) -> float:
        """Gets the gram_weight of this FoodPortion.


        :return: The gram_weight of this FoodPortion.
        :rtype: float
        """
        return self._gram_weight

    @gram_weight.setter
    def gram_weight(self, gram_weight: float):
        """Sets the gram_weight of this FoodPortion.


        :param gram_weight: The gram_weight of this FoodPortion.
        :type gram_weight: float
        """

        self._gram_weight = gram_weight

    @property
    def min_year_acquired(self) -> int:
        """Gets the min_year_acquired of this FoodPortion.


        :return: The min_year_acquired of this FoodPortion.
        :rtype: int
        """
        return self._min_year_acquired

    @min_year_acquired.setter
    def min_year_acquired(self, min_year_acquired: int):
        """Sets the min_year_acquired of this FoodPortion.


        :param min_year_acquired: The min_year_acquired of this FoodPortion.
        :type min_year_acquired: int
        """

        self._min_year_acquired = min_year_acquired

    @property
    def modifier(self) -> str:
        """Gets the modifier of this FoodPortion.


        :return: The modifier of this FoodPortion.
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier: str):
        """Sets the modifier of this FoodPortion.


        :param modifier: The modifier of this FoodPortion.
        :type modifier: str
        """

        self._modifier = modifier

    @property
    def portion_description(self) -> str:
        """Gets the portion_description of this FoodPortion.


        :return: The portion_description of this FoodPortion.
        :rtype: str
        """
        return self._portion_description

    @portion_description.setter
    def portion_description(self, portion_description: str):
        """Sets the portion_description of this FoodPortion.


        :param portion_description: The portion_description of this FoodPortion.
        :type portion_description: str
        """

        self._portion_description = portion_description

    @property
    def sequence_number(self) -> int:
        """Gets the sequence_number of this FoodPortion.


        :return: The sequence_number of this FoodPortion.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number: int):
        """Sets the sequence_number of this FoodPortion.


        :param sequence_number: The sequence_number of this FoodPortion.
        :type sequence_number: int
        """

        self._sequence_number = sequence_number

    @property
    def measure_unit(self) -> MeasureUnit:
        """Gets the measure_unit of this FoodPortion.


        :return: The measure_unit of this FoodPortion.
        :rtype: MeasureUnit
        """
        return self._measure_unit

    @measure_unit.setter
    def measure_unit(self, measure_unit: MeasureUnit):
        """Sets the measure_unit of this FoodPortion.


        :param measure_unit: The measure_unit of this FoodPortion.
        :type measure_unit: MeasureUnit
        """

        self._measure_unit = measure_unit
