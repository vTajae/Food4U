# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI import util


class NutrientConversionFactors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, value: float=None):  # noqa: E501
        """NutrientConversionFactors - a model defined in Swagger

        :param type: The type of this NutrientConversionFactors.  # noqa: E501
        :type type: str
        :param value: The value of this NutrientConversionFactors.  # noqa: E501
        :type value: float
        """
        self.swagger_types = {
            'type': str,
            'value': float
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value'
        }
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'NutrientConversionFactors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NutrientConversionFactors of this NutrientConversionFactors.  # noqa: E501
        :rtype: NutrientConversionFactors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this NutrientConversionFactors.


        :return: The type of this NutrientConversionFactors.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this NutrientConversionFactors.


        :param type: The type of this NutrientConversionFactors.
        :type type: str
        """

        self._type = type

    @property
    def value(self) -> float:
        """Gets the value of this NutrientConversionFactors.


        :return: The value of this NutrientConversionFactors.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this NutrientConversionFactors.


        :param value: The value of this NutrientConversionFactors.
        :type value: float
        """

        self._value = value
