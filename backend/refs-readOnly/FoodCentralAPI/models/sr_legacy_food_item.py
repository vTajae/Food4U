# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI.models.food_category import FoodCategory  # noqa: F401,E501
from FoodCentralAPI.models.food_nutrient import FoodNutrient  # noqa: F401,E501
from FoodCentralAPI.models.nutrient_conversion_factors import NutrientConversionFactors  # noqa: F401,E501
from FoodCentralAPI import util


class SRLegacyFoodItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, fdc_id: int=None, data_type: str=None, description: str=None, food_class: str=None, is_historical_reference: bool=None, ndb_number: int=None, publication_date: str=None, scientific_name: str=None, food_category: FoodCategory=None, food_nutrients: List[FoodNutrient]=None, nutrient_conversion_factors: List[NutrientConversionFactors]=None):  # noqa: E501
        """SRLegacyFoodItem - a model defined in Swagger

        :param fdc_id: The fdc_id of this SRLegacyFoodItem.  # noqa: E501
        :type fdc_id: int
        :param data_type: The data_type of this SRLegacyFoodItem.  # noqa: E501
        :type data_type: str
        :param description: The description of this SRLegacyFoodItem.  # noqa: E501
        :type description: str
        :param food_class: The food_class of this SRLegacyFoodItem.  # noqa: E501
        :type food_class: str
        :param is_historical_reference: The is_historical_reference of this SRLegacyFoodItem.  # noqa: E501
        :type is_historical_reference: bool
        :param ndb_number: The ndb_number of this SRLegacyFoodItem.  # noqa: E501
        :type ndb_number: int
        :param publication_date: The publication_date of this SRLegacyFoodItem.  # noqa: E501
        :type publication_date: str
        :param scientific_name: The scientific_name of this SRLegacyFoodItem.  # noqa: E501
        :type scientific_name: str
        :param food_category: The food_category of this SRLegacyFoodItem.  # noqa: E501
        :type food_category: FoodCategory
        :param food_nutrients: The food_nutrients of this SRLegacyFoodItem.  # noqa: E501
        :type food_nutrients: List[FoodNutrient]
        :param nutrient_conversion_factors: The nutrient_conversion_factors of this SRLegacyFoodItem.  # noqa: E501
        :type nutrient_conversion_factors: List[NutrientConversionFactors]
        """
        self.swagger_types = {
            'fdc_id': int,
            'data_type': str,
            'description': str,
            'food_class': str,
            'is_historical_reference': bool,
            'ndb_number': int,
            'publication_date': str,
            'scientific_name': str,
            'food_category': FoodCategory,
            'food_nutrients': List[FoodNutrient],
            'nutrient_conversion_factors': List[NutrientConversionFactors]
        }

        self.attribute_map = {
            'fdc_id': 'fdcId',
            'data_type': 'dataType',
            'description': 'description',
            'food_class': 'foodClass',
            'is_historical_reference': 'isHistoricalReference',
            'ndb_number': 'ndbNumber',
            'publication_date': 'publicationDate',
            'scientific_name': 'scientificName',
            'food_category': 'foodCategory',
            'food_nutrients': 'foodNutrients',
            'nutrient_conversion_factors': 'nutrientConversionFactors'
        }
        self._fdc_id = fdc_id
        self._data_type = data_type
        self._description = description
        self._food_class = food_class
        self._is_historical_reference = is_historical_reference
        self._ndb_number = ndb_number
        self._publication_date = publication_date
        self._scientific_name = scientific_name
        self._food_category = food_category
        self._food_nutrients = food_nutrients
        self._nutrient_conversion_factors = nutrient_conversion_factors

    @classmethod
    def from_dict(cls, dikt) -> 'SRLegacyFoodItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SRLegacyFoodItem of this SRLegacyFoodItem.  # noqa: E501
        :rtype: SRLegacyFoodItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fdc_id(self) -> int:
        """Gets the fdc_id of this SRLegacyFoodItem.


        :return: The fdc_id of this SRLegacyFoodItem.
        :rtype: int
        """
        return self._fdc_id

    @fdc_id.setter
    def fdc_id(self, fdc_id: int):
        """Sets the fdc_id of this SRLegacyFoodItem.


        :param fdc_id: The fdc_id of this SRLegacyFoodItem.
        :type fdc_id: int
        """
        if fdc_id is None:
            raise ValueError("Invalid value for `fdc_id`, must not be `None`")  # noqa: E501

        self._fdc_id = fdc_id

    @property
    def data_type(self) -> str:
        """Gets the data_type of this SRLegacyFoodItem.


        :return: The data_type of this SRLegacyFoodItem.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this SRLegacyFoodItem.


        :param data_type: The data_type of this SRLegacyFoodItem.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def description(self) -> str:
        """Gets the description of this SRLegacyFoodItem.


        :return: The description of this SRLegacyFoodItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SRLegacyFoodItem.


        :param description: The description of this SRLegacyFoodItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def food_class(self) -> str:
        """Gets the food_class of this SRLegacyFoodItem.


        :return: The food_class of this SRLegacyFoodItem.
        :rtype: str
        """
        return self._food_class

    @food_class.setter
    def food_class(self, food_class: str):
        """Sets the food_class of this SRLegacyFoodItem.


        :param food_class: The food_class of this SRLegacyFoodItem.
        :type food_class: str
        """

        self._food_class = food_class

    @property
    def is_historical_reference(self) -> bool:
        """Gets the is_historical_reference of this SRLegacyFoodItem.


        :return: The is_historical_reference of this SRLegacyFoodItem.
        :rtype: bool
        """
        return self._is_historical_reference

    @is_historical_reference.setter
    def is_historical_reference(self, is_historical_reference: bool):
        """Sets the is_historical_reference of this SRLegacyFoodItem.


        :param is_historical_reference: The is_historical_reference of this SRLegacyFoodItem.
        :type is_historical_reference: bool
        """

        self._is_historical_reference = is_historical_reference

    @property
    def ndb_number(self) -> int:
        """Gets the ndb_number of this SRLegacyFoodItem.


        :return: The ndb_number of this SRLegacyFoodItem.
        :rtype: int
        """
        return self._ndb_number

    @ndb_number.setter
    def ndb_number(self, ndb_number: int):
        """Sets the ndb_number of this SRLegacyFoodItem.


        :param ndb_number: The ndb_number of this SRLegacyFoodItem.
        :type ndb_number: int
        """

        self._ndb_number = ndb_number

    @property
    def publication_date(self) -> str:
        """Gets the publication_date of this SRLegacyFoodItem.


        :return: The publication_date of this SRLegacyFoodItem.
        :rtype: str
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date: str):
        """Sets the publication_date of this SRLegacyFoodItem.


        :param publication_date: The publication_date of this SRLegacyFoodItem.
        :type publication_date: str
        """

        self._publication_date = publication_date

    @property
    def scientific_name(self) -> str:
        """Gets the scientific_name of this SRLegacyFoodItem.


        :return: The scientific_name of this SRLegacyFoodItem.
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name: str):
        """Sets the scientific_name of this SRLegacyFoodItem.


        :param scientific_name: The scientific_name of this SRLegacyFoodItem.
        :type scientific_name: str
        """

        self._scientific_name = scientific_name

    @property
    def food_category(self) -> FoodCategory:
        """Gets the food_category of this SRLegacyFoodItem.


        :return: The food_category of this SRLegacyFoodItem.
        :rtype: FoodCategory
        """
        return self._food_category

    @food_category.setter
    def food_category(self, food_category: FoodCategory):
        """Sets the food_category of this SRLegacyFoodItem.


        :param food_category: The food_category of this SRLegacyFoodItem.
        :type food_category: FoodCategory
        """

        self._food_category = food_category

    @property
    def food_nutrients(self) -> List[FoodNutrient]:
        """Gets the food_nutrients of this SRLegacyFoodItem.


        :return: The food_nutrients of this SRLegacyFoodItem.
        :rtype: List[FoodNutrient]
        """
        return self._food_nutrients

    @food_nutrients.setter
    def food_nutrients(self, food_nutrients: List[FoodNutrient]):
        """Sets the food_nutrients of this SRLegacyFoodItem.


        :param food_nutrients: The food_nutrients of this SRLegacyFoodItem.
        :type food_nutrients: List[FoodNutrient]
        """

        self._food_nutrients = food_nutrients

    @property
    def nutrient_conversion_factors(self) -> List[NutrientConversionFactors]:
        """Gets the nutrient_conversion_factors of this SRLegacyFoodItem.


        :return: The nutrient_conversion_factors of this SRLegacyFoodItem.
        :rtype: List[NutrientConversionFactors]
        """
        return self._nutrient_conversion_factors

    @nutrient_conversion_factors.setter
    def nutrient_conversion_factors(self, nutrient_conversion_factors: List[NutrientConversionFactors]):
        """Sets the nutrient_conversion_factors of this SRLegacyFoodItem.


        :param nutrient_conversion_factors: The nutrient_conversion_factors of this SRLegacyFoodItem.
        :type nutrient_conversion_factors: List[NutrientConversionFactors]
        """

        self._nutrient_conversion_factors = nutrient_conversion_factors
