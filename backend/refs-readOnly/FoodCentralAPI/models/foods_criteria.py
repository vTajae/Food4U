# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI import util


class FoodsCriteria(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, fdc_ids: List[int]=None, format: str=None, nutrients: List[int]=None):  # noqa: E501
        """FoodsCriteria - a model defined in Swagger

        :param fdc_ids: The fdc_ids of this FoodsCriteria.  # noqa: E501
        :type fdc_ids: List[int]
        :param format: The format of this FoodsCriteria.  # noqa: E501
        :type format: str
        :param nutrients: The nutrients of this FoodsCriteria.  # noqa: E501
        :type nutrients: List[int]
        """
        self.swagger_types = {
            'fdc_ids': List[int],
            'format': str,
            'nutrients': List[int]
        }

        self.attribute_map = {
            'fdc_ids': 'fdcIds',
            'format': 'format',
            'nutrients': 'nutrients'
        }
        self._fdc_ids = fdc_ids
        self._format = format
        self._nutrients = nutrients

    @classmethod
    def from_dict(cls, dikt) -> 'FoodsCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoodsCriteria of this FoodsCriteria.  # noqa: E501
        :rtype: FoodsCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fdc_ids(self) -> List[int]:
        """Gets the fdc_ids of this FoodsCriteria.

        List of multiple FDC ID's  # noqa: E501

        :return: The fdc_ids of this FoodsCriteria.
        :rtype: List[int]
        """
        return self._fdc_ids

    @fdc_ids.setter
    def fdc_ids(self, fdc_ids: List[int]):
        """Sets the fdc_ids of this FoodsCriteria.

        List of multiple FDC ID's  # noqa: E501

        :param fdc_ids: The fdc_ids of this FoodsCriteria.
        :type fdc_ids: List[int]
        """

        self._fdc_ids = fdc_ids

    @property
    def format(self) -> str:
        """Gets the format of this FoodsCriteria.

        Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).  # noqa: E501

        :return: The format of this FoodsCriteria.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this FoodsCriteria.

        Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).  # noqa: E501

        :param format: The format of this FoodsCriteria.
        :type format: str
        """
        allowed_values = ["abridged", "full"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def nutrients(self) -> List[int]:
        """Gets the nutrients of this FoodsCriteria.

        Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.  # noqa: E501

        :return: The nutrients of this FoodsCriteria.
        :rtype: List[int]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients: List[int]):
        """Sets the nutrients of this FoodsCriteria.

        Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.  # noqa: E501

        :param nutrients: The nutrients of this FoodsCriteria.
        :type nutrients: List[int]
        """

        self._nutrients = nutrients
