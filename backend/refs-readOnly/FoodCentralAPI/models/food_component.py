# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from FoodCentralAPI.models.base_model_ import Model
from FoodCentralAPI import util


class FoodComponent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, data_points: int=None, gram_weight: float=None, is_refuse: bool=None, min_year_acquired: int=None, percent_weight: float=None):  # noqa: E501
        """FoodComponent - a model defined in Swagger

        :param id: The id of this FoodComponent.  # noqa: E501
        :type id: int
        :param name: The name of this FoodComponent.  # noqa: E501
        :type name: str
        :param data_points: The data_points of this FoodComponent.  # noqa: E501
        :type data_points: int
        :param gram_weight: The gram_weight of this FoodComponent.  # noqa: E501
        :type gram_weight: float
        :param is_refuse: The is_refuse of this FoodComponent.  # noqa: E501
        :type is_refuse: bool
        :param min_year_acquired: The min_year_acquired of this FoodComponent.  # noqa: E501
        :type min_year_acquired: int
        :param percent_weight: The percent_weight of this FoodComponent.  # noqa: E501
        :type percent_weight: float
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'data_points': int,
            'gram_weight': float,
            'is_refuse': bool,
            'min_year_acquired': int,
            'percent_weight': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'data_points': 'dataPoints',
            'gram_weight': 'gramWeight',
            'is_refuse': 'isRefuse',
            'min_year_acquired': 'minYearAcquired',
            'percent_weight': 'percentWeight'
        }
        self._id = id
        self._name = name
        self._data_points = data_points
        self._gram_weight = gram_weight
        self._is_refuse = is_refuse
        self._min_year_acquired = min_year_acquired
        self._percent_weight = percent_weight

    @classmethod
    def from_dict(cls, dikt) -> 'FoodComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoodComponent of this FoodComponent.  # noqa: E501
        :rtype: FoodComponent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this FoodComponent.


        :return: The id of this FoodComponent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this FoodComponent.


        :param id: The id of this FoodComponent.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this FoodComponent.


        :return: The name of this FoodComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FoodComponent.


        :param name: The name of this FoodComponent.
        :type name: str
        """

        self._name = name

    @property
    def data_points(self) -> int:
        """Gets the data_points of this FoodComponent.


        :return: The data_points of this FoodComponent.
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points: int):
        """Sets the data_points of this FoodComponent.


        :param data_points: The data_points of this FoodComponent.
        :type data_points: int
        """

        self._data_points = data_points

    @property
    def gram_weight(self) -> float:
        """Gets the gram_weight of this FoodComponent.


        :return: The gram_weight of this FoodComponent.
        :rtype: float
        """
        return self._gram_weight

    @gram_weight.setter
    def gram_weight(self, gram_weight: float):
        """Sets the gram_weight of this FoodComponent.


        :param gram_weight: The gram_weight of this FoodComponent.
        :type gram_weight: float
        """

        self._gram_weight = gram_weight

    @property
    def is_refuse(self) -> bool:
        """Gets the is_refuse of this FoodComponent.


        :return: The is_refuse of this FoodComponent.
        :rtype: bool
        """
        return self._is_refuse

    @is_refuse.setter
    def is_refuse(self, is_refuse: bool):
        """Sets the is_refuse of this FoodComponent.


        :param is_refuse: The is_refuse of this FoodComponent.
        :type is_refuse: bool
        """

        self._is_refuse = is_refuse

    @property
    def min_year_acquired(self) -> int:
        """Gets the min_year_acquired of this FoodComponent.


        :return: The min_year_acquired of this FoodComponent.
        :rtype: int
        """
        return self._min_year_acquired

    @min_year_acquired.setter
    def min_year_acquired(self, min_year_acquired: int):
        """Sets the min_year_acquired of this FoodComponent.


        :param min_year_acquired: The min_year_acquired of this FoodComponent.
        :type min_year_acquired: int
        """

        self._min_year_acquired = min_year_acquired

    @property
    def percent_weight(self) -> float:
        """Gets the percent_weight of this FoodComponent.


        :return: The percent_weight of this FoodComponent.
        :rtype: float
        """
        return self._percent_weight

    @percent_weight.setter
    def percent_weight(self, percent_weight: float):
        """Sets the percent_weight of this FoodComponent.


        :param percent_weight: The percent_weight of this FoodComponent.
        :type percent_weight: float
        """

        self._percent_weight = percent_weight
